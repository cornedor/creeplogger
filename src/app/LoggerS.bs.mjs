// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Logger from "./Logger.bs.mjs";
import * as Schema from "../helpers/Schema.bs.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Players from "../helpers/Players.bs.mjs";
import * as Database from "../helpers/Database.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

async function make(param) {
  var players;
  if (Database.databaseURL.startsWith("http")) {
    var players$1 = await fetch(Database.databaseURL + "/" + Players.bucket + ".json", {
          method: "GET"
        });
    var players$2 = Schema.parseWith(await players$1.json(), Players.playersSchema);
    if (players$2.TAG === "Ok") {
      var cmpInsensitive = function (a, b) {
        var al = a.toLowerCase();
        var bl = b.toLowerCase();
        if (al < bl) {
          return -1;
        } else if (al > bl) {
          return 1;
        } else {
          return 0;
        }
      };
      players = Js_dict.values(players$2._0).toSorted(function (a, b) {
            var primary = b.games - a.games | 0;
            if (primary !== 0.0) {
              return primary;
            }
            var nameCmp = cmpInsensitive(a.name, b.name);
            if (nameCmp === 0) {
              return cmpInsensitive(a.key, b.key);
            } else {
              return nameCmp;
            }
          });
    } else {
      players = [];
    }
  } else {
    players = [];
  }
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
              children: Caml_option.some(JsxRuntime.jsx(Logger.make, {
                        players: players
                      }))
            });
}

var LoggerS = make;

var make$1 = LoggerS;

export {
  make$1 as make,
}
/* Logger Not a pure module */
