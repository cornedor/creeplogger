'use client';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.mjs";
import * as Database from "../helpers/Database.bs.mjs";
import * as ListIcon from "./ListIcon.bs.mjs";
import * as AdminIcon from "./AdminIcon.bs.mjs";
import * as DartsIcon from "./DartsIcon.bs.mjs";
import Link from "next/link";
import * as SoccerIcon from "./SoccerIcon.bs.mjs";
import * as StatsModal from "./StatsModal.bs.mjs";
import * as TicketIcon from "./TicketIcon.bs.mjs";
import * as PieChartIcon from "./PieChartIcon.bs.mjs";
import * as FirebaseStatus from "../helpers/FirebaseStatus.bs.mjs";
import * as LeaderboardModal from "./LeaderboardModal.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as HeaderModuleCss from "./header.module.css";

var styles = HeaderModuleCss;

function Header(props) {
  var setSearchQuery = props.setSearchQuery;
  var searchQuery = props.searchQuery;
  var setGameMode = props.setGameMode;
  var gameMode = props.gameMode;
  var setShowQueueButtons = props.setShowQueueButtons;
  var __disabled = props.disabled;
  var onReset = props.onReset;
  var onNextStep = props.onNextStep;
  var disabled = __disabled !== undefined ? __disabled : false;
  var user = Database.useUser();
  var match = React.useState(function () {
        return false;
      });
  var setShowScores = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setShowStats = match$1[1];
  var match$2 = React.useState(function () {
        return false;
      });
  var setMounted = match$2[1];
  var mounted = match$2[0];
  React.useEffect((function () {
          setMounted(function (param) {
                return true;
              });
        }), []);
  var isConnected = FirebaseStatus.useFirebaseStatus();
  var nextLabel;
  switch (props.step) {
    case "ScoreForm" :
        nextLabel = "Opslaan";
        break;
    case "UserSelection" :
    case "Confirmation" :
        nextLabel = "Verder";
        break;
    
  }
  var tmp;
  tmp = setGameMode !== undefined ? (
      gameMode === "Foosball" ? JsxRuntime.jsx("button", {
              children: JsxRuntime.jsx(SoccerIcon.make, {}),
              className: "text-white w-[44px] aspect-square text-[26px] flex justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8  plausible-event-name=GameModeDarts",
              onClick: (function (param) {
                  setGameMode(function (param) {
                        return "Darts";
                      });
                })
            }) : JsxRuntime.jsx("button", {
              children: JsxRuntime.jsx(DartsIcon.make, {}),
              className: "text-white w-[44px] aspect-square text-[26px] flex justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8 ",
              onClick: (function (param) {
                  setGameMode(function (param) {
                        return "Foosball";
                      });
                })
            })
    ) : JsxRuntime.jsx(JsxRuntime.Fragment, {});
  var tmp$1;
  tmp$1 = mounted && !(user === null || user === undefined) ? JsxRuntime.jsx(Link, {
          href: "/admin",
          children: JsxRuntime.jsx(AdminIcon.make, {}),
          className: "text-white w-[44px] aspect-square text-[26px] flex justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8 "
        }) : JsxRuntime.jsx(JsxRuntime.Fragment, {});
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsx(LeaderboardModal.make, {
                      show: match[0],
                      setShow: setShowScores,
                      gameMode: gameMode,
                      setGameMode: setGameMode
                    }),
                JsxRuntime.jsx(StatsModal.make, {
                      show: match$1[0],
                      setShow: setShowStats
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("button", {
                                            children: JsxRuntime.jsx(ListIcon.make, {}),
                                            className: "text-white w-[44px] aspect-square text-[26px] flex justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8 plausible-event-name=ShowScores",
                                            onClick: (function (param) {
                                                setShowScores(function (param) {
                                                      return true;
                                                    });
                                              })
                                          }),
                                      JsxRuntime.jsx("button", {
                                            children: JsxRuntime.jsx(PieChartIcon.make, {}),
                                            className: "text-white w-[44px] aspect-square text-[26px] flex justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8 plausible-event-name=ShowStats",
                                            onClick: (function (param) {
                                                setShowStats(function (param) {
                                                      return true;
                                                    });
                                              })
                                          }),
                                      tmp,
                                      JsxRuntime.jsx("button", {
                                            children: JsxRuntime.jsx(TicketIcon.make, {}),
                                            className: "text-white w-[44px] aspect-square text-[26px] hidden justify-center items-center -ml-3 rounded-full bg-black/0 transition-all ease-in-out duration-200 shadow-none hover:bg-black/20 hover:shadow-icon-button hover:ring-8 ring-black/20 active:bg-black/20 active:shadow-icon-button active:ring-8",
                                            onClick: (function (param) {
                                                setShowQueueButtons(function (show) {
                                                      return !show;
                                                    });
                                              })
                                          }),
                                      tmp$1
                                    ],
                                    className: "flex items-center gap-5"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: searchQuery !== undefined && setSearchQuery !== undefined ? JsxRuntime.jsx("input", {
                                            className: "w-full max-w-[600px] text-white placeholder-white/70 bg-white/10 border border-white/20 rounded-full px-5 py-2.5 text-lg shadow-inner focus:outline-none focus:ring-2 focus:ring-white/40 focus:border-white/40 backdrop-blur-md",
                                            placeholder: "Zoek speler...",
                                            value: searchQuery,
                                            onChange: (function ($$event) {
                                                var v = $$event.target.value;
                                                setSearchQuery(function (param) {
                                                      return v;
                                                    });
                                              })
                                          }) : JsxRuntime.jsx(JsxRuntime.Fragment, {}),
                                    className: "flex-1 flex items-center justify-center"
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      mounted ? JsxRuntime.jsx("span", {
                                              className: isConnected ? styles.connected : styles.disconnected
                                            }) : JsxRuntime.jsx(JsxRuntime.Fragment, {}),
                                      JsxRuntime.jsx(Button.make, {
                                            variant: "Grey",
                                            onClick: (function (param) {
                                                onReset();
                                              }),
                                            children: "Reset"
                                          }),
                                      JsxRuntime.jsx(Button.make, {
                                            className: "plausible-event-name=NextStep",
                                            variant: "Glass",
                                            onClick: (function (param) {
                                                onNextStep();
                                              }),
                                            children: nextLabel,
                                            disabled: !isConnected || disabled
                                          })
                                    ],
                                    className: "fixed lg:relative top-[calc(100vh_-_100%_+_1rem)] right-8 lg:bottom-0 flex items-center gap-5"
                                  })
                            ],
                            className: "flex justify-between flex-wrap text-white gap-5"
                          }),
                      className: "px-4 lg:px-10 py-5 sticky top-0 z-40 bg-white/10 border-b border-white/10 backdrop-blur-xl backdrop-saturate-150 shadow-[inset_0_1px_0_rgba(255,255,255,0.1)]"
                    })
              ]
            });
}

var make = Header;

export {
  make ,
}
/* styles Not a pure module */
