// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stats from "../helpers/Stats.bs.mjs";
import * as React from "react";
import * as Button from "./Button.bs.mjs";
import * as Players from "../helpers/Players.bs.mjs";
import * as OpenSkill from "../helpers/OpenSkill.bs.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as OpenSkillRating from "../helpers/OpenSkillRating.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function MatchMakerModal(props) {
  var setGameMode = props.setGameMode;
  var setSelectedUsers = props.setSelectedUsers;
  var setShow = props.setShow;
  var players = Players.useAllPlayers("rating", false);
  var stats = Stats.useStats();
  var match = React.useState(function () {
        
      });
  var setSelected = match[1];
  var selected = match[0];
  var toggleSelected = function (key) {
    setSelected(function (s) {
          var match = Belt_MapString.get(s, key);
          if (match !== undefined && match) {
            return Belt_MapString.set(s, key, false);
          } else {
            return Belt_MapString.set(s, key, true);
          }
        });
  };
  var getSelectedPlayers = function () {
    var keys = Belt_MapString.keysToArray(Belt_MapString.keep(selected, (function (param, v) {
                return v === true;
              })));
    var opts = keys.map(function (key) {
          return Players.playerByKey(players, key);
        });
    var filtered = opts.filter(Core__Option.isSome);
    return filtered.map(function (opt) {
                return Core__Option.getExn(opt, undefined);
              });
  };
  var playerToRating = function (p) {
    return OpenSkill.playerToRating(p);
  };
  var bestPairingOfFour = function (ps) {
    var p0 = ps[0];
    var p1 = ps[1];
    var p2 = ps[2];
    var p3 = ps[3];
    var teamA = [
      OpenSkill.playerToRating(p0),
      OpenSkill.playerToRating(p1)
    ];
    var teamB = [
      OpenSkill.playerToRating(p2),
      OpenSkill.playerToRating(p3)
    ];
    var p = OpenSkill.getWinProbability(teamA, teamB);
    var teamA$1 = [
      OpenSkill.playerToRating(p0),
      OpenSkill.playerToRating(p2)
    ];
    var teamB$1 = [
      OpenSkill.playerToRating(p1),
      OpenSkill.playerToRating(p3)
    ];
    var p$1 = OpenSkill.getWinProbability(teamA$1, teamB$1);
    var teamA$2 = [
      OpenSkill.playerToRating(p0),
      OpenSkill.playerToRating(p3)
    ];
    var teamB$2 = [
      OpenSkill.playerToRating(p1),
      OpenSkill.playerToRating(p2)
    ];
    var p$2 = OpenSkill.getWinProbability(teamA$2, teamB$2);
    var pairs = [
      [
        [
          [
            p0,
            p1
          ],
          [
            p2,
            p3
          ]
        ],
        Math.abs(p - 0.5)
      ],
      [
        [
          [
            p0,
            p2
          ],
          [
            p1,
            p3
          ]
        ],
        Math.abs(p$1 - 0.5)
      ],
      [
        [
          [
            p0,
            p3
          ],
          [
            p1,
            p2
          ]
        ],
        Math.abs(p$2 - 0.5)
      ]
    ];
    return Core__Array.reduce(pairs, pairs[0], (function (best, cur) {
                  if (cur[1] < best[1]) {
                    return cur;
                  } else {
                    return best;
                  }
                }));
  };
  var chooseBestMatch = function (sel) {
    var n = sel.length;
    if (n < 4) {
      return ;
    }
    if (n === 4) {
      var match = bestPairingOfFour(sel);
      var match$1 = match[0];
      return [
              match$1[0],
              match$1[1]
            ];
    }
    var best;
    for(var i = 0 ,i_finish = n - 4 | 0; i <= i_finish; ++i){
      for(var j = i + 1 | 0 ,j_finish = n - 3 | 0; j <= j_finish; ++j){
        for(var k = j + 1 | 0 ,k_finish = n - 2 | 0; k <= k_finish; ++k){
          for(var l = k + 1 | 0; l < n; ++l){
            var ps = [
              sel[i],
              sel[j],
              sel[k],
              sel[l]
            ];
            var match$2 = bestPairingOfFour(ps);
            var dev = match$2[1];
            var match$3 = match$2[0];
            var b = match$3[1];
            var a = match$3[0];
            var match$4 = best;
            best = match$4 !== undefined && dev >= match$4[1] ? best : [
                [
                  a,
                  b
                ],
                dev
              ];
          }
        }
      }
    }
    var match$5 = best;
    if (match$5 !== undefined) {
      return match$5[0];
    }
    
  };
  var assignColors = function (teamA, teamB) {
    var pA = OpenSkill.getWinProbability(teamA.map(playerToRating), teamB.map(playerToRating));
    var teamAIsStronger = pA >= 0.5;
    var total = stats.totalBlueWins + stats.totalRedWins | 0;
    var blueStronger = total > 0 ? stats.totalBlueWins / total > 0.5 : false;
    if (blueStronger) {
      if (teamAIsStronger) {
        return [
                teamA,
                teamB
              ];
      } else {
        return [
                teamB,
                teamA
              ];
      }
    } else if (teamAIsStronger) {
      return [
              teamB,
              teamA
            ];
    } else {
      return [
              teamA,
              teamB
            ];
    }
  };
  var makeMatch = function () {
    var selPlayers = getSelectedPlayers();
    var match = chooseBestMatch(selPlayers);
    if (match === undefined) {
      return ;
    }
    var match$1 = assignColors(match[0], match[1]);
    var redTeam = match$1[1];
    var blueTeam = match$1[0];
    if (setSelectedUsers !== undefined) {
      setSelectedUsers(function (param) {
            var withBlue = Core__Array.reduce(blueTeam, undefined, (function (m, p) {
                    return Belt_MapString.set(m, p.key, "Blue");
                  }));
            return Core__Array.reduce(redTeam, withBlue, (function (m, p) {
                          return Belt_MapString.set(m, p.key, "Red");
                        }));
          });
    }
    if (setGameMode !== undefined) {
      setGameMode(function (param) {
            return "Foosball";
          });
    }
    setSelected(function (param) {
          
        });
    setShow(function (s) {
          return !s;
        });
  };
  var numSelected = Belt_MapString.size(Belt_MapString.keep(selected, (function (param, v) {
              return v === true;
            })));
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("header", {
                      children: [
                        JsxRuntime.jsx(Button.make, {
                              variant: "Blue",
                              onClick: (function (param) {
                                  setShow(function (s) {
                                        return !s;
                                      });
                                }),
                              children: "Terug"
                            }),
                        JsxRuntime.jsx("div", {
                              className: "flex-1"
                            }),
                        JsxRuntime.jsx(Button.make, {
                              variant: "Blue",
                              onClick: (function (param) {
                                  makeMatch();
                                }),
                              children: "Make a match",
                              disabled: numSelected < 4
                            })
                      ],
                      className: "flex items-center gap-4"
                    }),
                JsxRuntime.jsx("h2", {
                      children: "Select players (min 4)",
                      className: "pt-5 mb-4 block text-2xl"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        "Selected: ",
                        numSelected
                      ],
                      className: "text-white/70 mb-2"
                    }),
                JsxRuntime.jsx("ul", {
                      children: players.map(function (p) {
                            var match = Belt_MapString.get(selected, p.key);
                            var isSelected = match !== undefined && match ? true : false;
                            return JsxRuntime.jsxs("li", {
                                        children: [
                                          JsxRuntime.jsxs("button", {
                                                children: [
                                                  JsxRuntime.jsx("strong", {
                                                        children: p.name
                                                      }),
                                                  JsxRuntime.jsx("span", {
                                                        children: OpenSkillRating.toDisplayOrdinal(p.ordinal).toString(),
                                                        className: "ml-2 text-white/60"
                                                      })
                                                ],
                                                className: "text-left flex-1",
                                                onClick: (function (param) {
                                                    toggleSelected(p.key);
                                                  })
                                              }),
                                          JsxRuntime.jsx("input", {
                                                "aria-label": p.name,
                                                className: "w-5 h-5",
                                                checked: isSelected,
                                                type: "checkbox",
                                                onChange: (function (param) {
                                                    toggleSelected(p.key);
                                                  })
                                              })
                                        ],
                                        className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between items-center"
                                      }, p.key);
                          }),
                      className: "grid grid-cols-1 md:grid-cols-2 gap-2 overflow-auto"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(Button.make, {
                            variant: "Grey",
                            onClick: (function (param) {
                                setSelected(function (param) {
                                      
                                    });
                              }),
                            children: "Clear"
                          }),
                      className: "mt-4 flex gap-2"
                    })
              ],
              className: "modal flex flex-col",
              style: {
                transform: props.show ? "translateX(0)" : "translateX(-100%)"
              }
            });
}

var make = MatchMakerModal;

export {
  make ,
}
/* Stats Not a pure module */
