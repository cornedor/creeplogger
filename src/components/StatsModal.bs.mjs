// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Games from "../helpers/Games.bs.mjs";
import * as Rules from "../helpers/Rules.bs.mjs";
import * as Stats from "../helpers/Stats.bs.mjs";
import * as React from "react";
import * as Button from "./Button.bs.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Players from "../helpers/Players.bs.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.mjs";
import * as DaysWithout from "../helpers/DaysWithout.bs.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as OpenSkillRating from "../helpers/OpenSkillRating.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as DifferenceInDays from "date-fns/differenceInDays";

function StatsModal(props) {
  var setShow = props.setShow;
  var show = props.show;
  var stats = Stats.useStats();
  var match = DaysWithout.useDaysWithout();
  var daysSince = DifferenceInDays.differenceInDays(new Date(), match[1]);
  var blue = stats.totalBlueWins;
  var red = stats.totalRedWins;
  var bluePercentages = (blue / (blue + red) * 100).toString();
  var match$1 = React.useState(function () {
        return [];
      });
  var setPlayersForChart = match$1[1];
  var playersForChart = match$1[0];
  var match$2 = React.useState(function () {
        return {};
      });
  var setSeriesByPlayer = match$2[1];
  var seriesByPlayer = match$2[0];
  var match$3 = React.useState(function () {
        return [];
      });
  var setSelectedPlayerKeys = match$3[1];
  var selectedPlayerKeys = match$3[0];
  var match$4 = React.useState(function () {
        return false;
      });
  var setIsLoadingChart = match$4[1];
  var match$5 = React.useState(function () {
        return false;
      });
  var setHasLoadedOnce = match$5[1];
  var hasLoadedOnce = match$5[0];
  React.useEffect((function () {
          if (show && !hasLoadedOnce) {
            setIsLoadingChart(function (param) {
                  return true;
                });
            Games.fetchAllGames().then(function (games) {
                  return Players.fetchAllPlayers().then(function (playersDict) {
                              var playersArray = Object.keys(playersDict).map(function (key) {
                                    return Core__Option.getExn(playersDict[key], undefined);
                                  });
                              var sortedPlayers = playersArray.toSorted(function (a, b) {
                                    return b.ordinal - a.ordinal;
                                  });
                              var defaultSelected = sortedPlayers.slice(0, 5).map(function (p) {
                                    return p.key;
                                  });
                              var workingPlayers = {};
                              playersArray.forEach(function (p) {
                                    var newrecord = Caml_obj.obj_dup(p);
                                    newrecord.lastOpenSkillChange = 0.0;
                                    newrecord.ordinal = 0.0;
                                    newrecord.sigma = 8.333;
                                    newrecord.mu = 25.0;
                                    workingPlayers[p.key] = newrecord;
                                  });
                              var orderedGames = games.toSorted(function (a, b) {
                                    return a.date.getTime() - b.date.getTime();
                                  });
                              var seriesMap = {};
                              orderedGames.forEach(function (game) {
                                    var blueWin = Rules.isBlueWin(game.redScore, game.blueScore);
                                    var redPlayers = game.redTeam.map(function (key) {
                                          return Core__Option.getExn(Js_dict.get(workingPlayers, key), undefined);
                                        });
                                    var bluePlayers = game.blueTeam.map(function (key) {
                                          return Core__Option.getExn(Js_dict.get(workingPlayers, key), undefined);
                                        });
                                    var match;
                                    if (blueWin) {
                                      match = OpenSkillRating.calculateScore(bluePlayers, redPlayers, "Foosball");
                                    } else {
                                      var match$1 = OpenSkillRating.calculateScore(redPlayers, bluePlayers, "Foosball");
                                      match = [
                                        match$1[1],
                                        match$1[0],
                                        match$1[2]
                                      ];
                                    }
                                    var time = game.date.getTime();
                                    match[0].forEach(function (player) {
                                          workingPlayers[player.key] = player;
                                          var score = OpenSkillRating.toDisplayOrdinal(player.ordinal);
                                          var prev = Belt_Option.getWithDefault(Js_dict.get(seriesMap, player.key), []);
                                          var next = prev.concat([{
                                                  time: time,
                                                  score: score
                                                }]);
                                          seriesMap[player.key] = next;
                                        });
                                    match[1].forEach(function (player) {
                                          workingPlayers[player.key] = player;
                                          var score = OpenSkillRating.toDisplayOrdinal(player.ordinal);
                                          var prev = Belt_Option.getWithDefault(Js_dict.get(seriesMap, player.key), []);
                                          var next = prev.concat([{
                                                  time: time,
                                                  score: score
                                                }]);
                                          seriesMap[player.key] = next;
                                        });
                                  });
                              setSeriesByPlayer(function (param) {
                                    return seriesMap;
                                  });
                              setPlayersForChart(function (param) {
                                    return sortedPlayers;
                                  });
                              setSelectedPlayerKeys(function (param) {
                                    return defaultSelected;
                                  });
                              setIsLoadingChart(function (param) {
                                    return false;
                                  });
                              setHasLoadedOnce(function (param) {
                                    return true;
                                  });
                              return Promise.resolve();
                            });
                });
          }
          
        }), [
        show,
        hasLoadedOnce
      ]);
  var getDomain = function () {
    var times = [];
    var scores = [];
    Object.keys(seriesByPlayer).forEach(function (key) {
          var arr = Core__Option.getExn(Js_dict.get(seriesByPlayer, key), undefined);
          arr.forEach(function (p) {
                times.push(p.time);
                scores.push(p.score);
              });
        });
    if (times.length === 0) {
      return [
              0.0,
              1.0,
              0.0,
              1.0
            ];
    }
    var initT = times[0];
    var minT = Core__Array.reduce(times, initT, (function (acc, v) {
            if (v < acc) {
              return v;
            } else {
              return acc;
            }
          }));
    var maxT = Core__Array.reduce(times, initT, (function (acc, v) {
            if (v > acc) {
              return v;
            } else {
              return acc;
            }
          }));
    var initS = scores[0];
    var minS = Core__Array.reduce(scores, initS, (function (acc, v) {
            if (v < acc) {
              return v;
            } else {
              return acc;
            }
          }));
    var maxS = Core__Array.reduce(scores, initS, (function (acc, v) {
            if (v > acc) {
              return v;
            } else {
              return acc;
            }
          }));
    return [
            minT,
            maxT,
            minS,
            maxS
          ];
  };
  var match$6 = getDomain();
  var maxS = match$6[3];
  var minS = match$6[2];
  var maxT = match$6[1];
  var minT = match$6[0];
  var spanT = maxT - minT === 0.0 ? 1.0 : maxT - minT;
  var spanS = maxS - minS === 0.0 ? 1.0 : maxS - minS;
  var scaleX = function (t) {
    return 24.0 + (t - minT) / spanT * (720.0 - 2.0 * 24.0);
  };
  var scaleY = function (s) {
    return 260.0 - 24.0 - (s - minS) / spanS * (260.0 - 2.0 * 24.0);
  };
  var isSelected = function (key, sel) {
    return sel.some(function (v) {
                return Caml_obj.equal(v, key);
              });
  };
  var match$7 = playersForChart.length;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("header", {
                      children: JsxRuntime.jsx(Button.make, {
                            variant: "Blue",
                            onClick: (function (param) {
                                setShow(function (s) {
                                      return !s;
                                    });
                              }),
                            children: "Terug"
                          })
                    }),
                JsxRuntime.jsx("h2", {
                      children: "Foosball",
                      className: "pt-5 mb-4 block text-2xl"
                    }),
                JsxRuntime.jsxs("ul", {
                      children: [
                        JsxRuntime.jsxs("li", {
                              children: [
                                JsxRuntime.jsx("strong", {
                                      children: "Total games: "
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: stats.totalGames
                                    })
                              ],
                              className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between"
                            }),
                        JsxRuntime.jsxs("li", {
                              children: [
                                JsxRuntime.jsx("strong", {
                                      children: "Blue wins: "
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: stats.totalBlueWins
                                    })
                              ],
                              className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between"
                            }),
                        JsxRuntime.jsxs("li", {
                              children: [
                                JsxRuntime.jsx("strong", {
                                      children: "Red wins: "
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: stats.totalRedWins
                                    })
                              ],
                              className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between"
                            }),
                        JsxRuntime.jsxs("li", {
                              children: [
                                JsxRuntime.jsx("strong", {
                                      children: "7-0's: "
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: stats.totalAbsoluteWins
                                    })
                              ],
                              className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between"
                            })
                      ],
                      className: "grid grid-cols-2 gap-2"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            className: "rounded-full aspect-square w-[300px] my-4 mx-auto shadow-inner shadow-orange-50",
                            style: {
                              background: "conic-gradient(#86b7ff, #1c77ff " + bluePercentages + "%, #ff3e6e " + bluePercentages + "%, #ff0055)"
                            }
                          })
                    }),
                JsxRuntime.jsx("hr", {}),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "OpenSkill progression",
                              className: "mb-2 block text-xl"
                            }),
                        JsxRuntime.jsx("div", {
                              children: match$4[0] ? JsxRuntime.jsx("div", {
                                      children: "Loading chart...",
                                      className: "text-center py-8 opacity-70"
                                    }) : (
                                  match$7 !== 0 ? JsxRuntime.jsxs("svg", {
                                          children: [
                                            JsxRuntime.jsx("line", {
                                                  stroke: "#ffffff22",
                                                  strokeWidth: "1",
                                                  x1: (24.0).toString(),
                                                  x2: (720.0 - 24.0).toString(),
                                                  y1: (260.0 - 24.0).toString(),
                                                  y2: (260.0 - 24.0).toString()
                                                }),
                                            JsxRuntime.jsx("line", {
                                                  stroke: "#ffffff22",
                                                  strokeWidth: "1",
                                                  x1: (24.0).toString(),
                                                  x2: (24.0).toString(),
                                                  y1: (24.0).toString(),
                                                  y2: (260.0 - 24.0).toString()
                                                }),
                                            selectedPlayerKeys.map(function (key, idx) {
                                                  var normalize = function (_i) {
                                                    while(true) {
                                                      var i = _i;
                                                      if (i < 10) {
                                                        return i;
                                                      }
                                                      _i = i - 10 | 0;
                                                      continue ;
                                                    };
                                                  };
                                                  var i10 = normalize(idx);
                                                  var color;
                                                  switch (i10) {
                                                    case 0 :
                                                        color = "#60a5fa";
                                                        break;
                                                    case 1 :
                                                        color = "#f472b6";
                                                        break;
                                                    case 2 :
                                                        color = "#34d399";
                                                        break;
                                                    case 3 :
                                                        color = "#f59e0b";
                                                        break;
                                                    case 4 :
                                                        color = "#a78bfa";
                                                        break;
                                                    case 5 :
                                                        color = "#fb7185";
                                                        break;
                                                    case 6 :
                                                        color = "#22d3ee";
                                                        break;
                                                    case 7 :
                                                        color = "#fde047";
                                                        break;
                                                    case 8 :
                                                        color = "#4ade80";
                                                        break;
                                                    default:
                                                      color = "#f97316";
                                                  }
                                                  var points = Js_dict.get(seriesByPlayer, key);
                                                  if (points === undefined) {
                                                    return null;
                                                  }
                                                  var lines = points.map(function (p, i) {
                                                        if (i === 0) {
                                                          return null;
                                                        }
                                                        var prev = points[i - 1 | 0];
                                                        return JsxRuntime.jsx("line", {
                                                                    stroke: color,
                                                                    strokeWidth: "2",
                                                                    x1: scaleX(prev.time).toString(),
                                                                    x2: scaleX(p.time).toString(),
                                                                    y1: scaleY(prev.score).toString(),
                                                                    y2: scaleY(p.score).toString()
                                                                  }, i.toString());
                                                      });
                                                  return JsxRuntime.jsx("g", {
                                                              children: lines
                                                            }, key);
                                                })
                                          ],
                                          className: "w-full h-64",
                                          height: (Math.round(260.0) | 0).toString(),
                                          width: (Math.round(720.0) | 0).toString(),
                                          preserveAspectRatio: "none",
                                          viewBox: "0 0 " + (Math.round(720.0) | 0).toString() + " " + (Math.round(260.0) | 0).toString()
                                        }) : JsxRuntime.jsx("div", {
                                          children: "No data",
                                          className: "text-center py-8 opacity-70"
                                        })
                                ),
                              className: "rounded border border-white/20 bg-white/5 p-3"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Players to show (multi-select)",
                                      className: "block mb-2 text-sm opacity-80"
                                    }),
                                JsxRuntime.jsx("select", {
                                      children: playersForChart.map(function (p) {
                                            var sel = selectedPlayerKeys.some(function (k) {
                                                  return k === p.key;
                                                });
                                            return JsxRuntime.jsx("option", {
                                                        children: p.name,
                                                        selected: sel,
                                                        value: p.key,
                                                        onClick: (function (param) {
                                                            var key = p.key;
                                                            setSelectedPlayerKeys(function (sel) {
                                                                  if (isSelected(key, sel)) {
                                                                    return Belt_Array.keep(sel, (function (v) {
                                                                                  return v !== key;
                                                                                }));
                                                                  } else {
                                                                    return sel.concat([key]);
                                                                  }
                                                                });
                                                          })
                                                      }, p.key);
                                          }),
                                      className: "w-full bg-white/5 border border-white/20 rounded p-2 min-h-[140px]",
                                      multiple: true
                                    })
                              ],
                              className: "mt-3"
                            })
                      ],
                      className: "mt-6"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: "Darts",
                              className: "pt-5 mb-4 block text-2xl"
                            }),
                        JsxRuntime.jsx("ul", {
                              children: JsxRuntime.jsxs("li", {
                                    children: [
                                      JsxRuntime.jsx("strong", {
                                            children: "Total games: "
                                          }),
                                      JsxRuntime.jsx("span", {
                                            children: stats.totalDartsGames
                                          })
                                    ],
                                    className: "p-2 rounded border-white/20 border bg-white/5 flex justify-between"
                                  }),
                              className: "grid grid-cols-2 gap-2"
                            }),
                        JsxRuntime.jsx("br", {})
                      ]
                    }),
                JsxRuntime.jsx("hr", {}),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: match[0],
                              className: "pt-5 text-3xl text-center"
                            }),
                        JsxRuntime.jsx("div", {
                              children: daysSince.toString(),
                              className: "text-[160px] font-handwritten"
                            }),
                        JsxRuntime.jsx(Button.make, {
                              variant: "Blue",
                              onClick: (function (param) {
                                  DaysWithout.reset();
                                }),
                              children: "Reset"
                            })
                      ],
                      className: "flex justify-center items-center flex-col gap-2"
                    }),
                JsxRuntime.jsx("div", {
                      className: "flex-1"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("a", {
                            children: "Contribute on GitHub",
                            href: "https://github.com/cornedor/creeplogger"
                          })
                    })
              ],
              className: "modal flex flex-col",
              style: {
                transform: show ? "translateX(0)" : "translateX(-100%)"
              }
            });
}

var make = StatsModal;

export {
  make ,
}
/* Games Not a pure module */
