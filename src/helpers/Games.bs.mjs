// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Schema from "./Schema.bs.mjs";
import * as Database from "./Database.bs.mjs";
import * as RescriptCore from "@rescript/core/src/RescriptCore.bs.mjs";
import * as FirebaseSchema from "./FirebaseSchema.bs.mjs";
import * as Database$1 from "firebase/database";

var modifierSchema = Schema.union([
      Schema.object(function (s) {
            s.tag("kind", "handicap");
            return {
                    TAG: "Handicap",
                    _0: s.f("blue", Schema.$$int),
                    _1: s.f("red", Schema.$$int)
                  };
          }),
      Schema.object(function (s) {
            s.tag("kind", "one-v-one");
            return "OneVOne";
          })
    ]);

var gameSchema = Schema.object(function (s) {
      return {
              blueScore: s.f("blueScore", Schema.intMin(Schema.$$int, 0, undefined)),
              redScore: s.f("redScore", Schema.intMin(Schema.$$int, 0, undefined)),
              blueTeam: s.f("blueTeam", Schema.array(Schema.string)),
              redTeam: s.f("redTeam", Schema.array(Schema.string)),
              date: s.f("date", Schema.transform(Schema.$$float, (function (param) {
                          return {
                                  p: (function (prim) {
                                      return new Date(prim);
                                    }),
                                  s: (function (prim) {
                                      return prim.getTime();
                                    })
                                };
                        }))),
              modifiers: s.f("modifiers", FirebaseSchema.nullableTransform(Schema.option(Schema.array(modifierSchema))))
            };
    });

function addGame(game) {
  var gamesRef = Database$1.ref(Database.database, "games");
  var data = Schema.serializeWith(game, gameSchema);
  if (data.TAG === "Ok") {
    return Database$1.push(gamesRef, data._0);
  } else {
    return RescriptCore.panic("Could not create game");
  }
}

async function getTimePeriod(period) {
  var date = new Date();
  date.setHours(0, 0, 0, 0);
  switch (period) {
    case "Daily" :
        break;
    case "Weekly" :
        var x = date.getDay();
        var newDate = (date.getDate() - (
            x === 0 ? 7 : x
          ) | 0) + 1 | 0;
        date.setDate(newDate);
        break;
    case "Monthly" :
        date.setDate(0);
        break;
    case "All" :
        date.setFullYear(2000);
        break;
    
  }
  var games = await Database$1.get(Database$1.query(Database$1.ref(Database.database, "games"), Database$1.orderByChild("date"), Database$1.startAt(date.getTime())));
  var val = games.val();
  if (val == null) {
    return {};
  }
  var val$1 = Schema.parseWith(val, Schema.dict(gameSchema));
  if (val$1.TAG === "Ok") {
    return val$1._0;
  }
  console.log(val$1._0);
  return {};
}

var empty = {};

function useLastGames() {
  var match = React.useState(function () {
        return empty;
      });
  var setGames = match[1];
  React.useEffect((function () {
          var isClient = (typeof window !== 'undefined');
          if (!isClient) {
            return ;
          }
          var gamesRef = Database$1.query(Database$1.ref(Database.database, "games"), Database$1.orderByChild("date"));
          return Database$1.onValue(gamesRef, (function (snapshot) {
                        var val = snapshot.val();
                        var games;
                        if (val == null) {
                          games = empty;
                        } else {
                          var val$1 = Schema.parseWith(val, Schema.dict(gameSchema));
                          if (val$1.TAG === "Ok") {
                            games = val$1._0;
                          } else {
                            console.log(val$1._0);
                            games = {};
                          }
                        }
                        setGames(function (param) {
                              return games;
                            });
                      }), undefined);
        }), [setGames]);
  return match[0];
}

async function fetchAllGames() {
  var games = await Database$1.get(Database$1.query(Database$1.ref(Database.database, "games"), Database$1.orderByChild("date")));
  var orderedGames = [];
  games.forEach(function (snap) {
        var val = snap.val();
        if (val == null) {
          return ;
        }
        var val$1 = Schema.parseWith(val, gameSchema);
        if (val$1.TAG === "Ok") {
          orderedGames.push(val$1._0);
          return ;
        }
        console.log(val$1._0);
      });
  return orderedGames;
}

function removeGame(gameKey) {
  return Database$1.remove(Database$1.ref(Database.database, "games/" + gameKey));
}

export {
  addGame ,
  getTimePeriod ,
  fetchAllGames ,
  removeGame ,
  useLastGames ,
}
/* modifierSchema Not a pure module */
