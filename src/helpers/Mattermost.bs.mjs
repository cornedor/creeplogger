'use server';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Summary from "./Summary.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as RescriptCore from "@rescript/core/src/RescriptCore.bs.mjs";
import * as OpenSkillRating from "./OpenSkillRating.bs.mjs";

var url = process.env.MATTERMOST_URL;

var isEnabled = process.env.MATTERMOST_ENABLED === "true";

function publishMessage(message) {
  if (url !== undefined) {
    if (isEnabled) {
      return Caml_option.some(fetch(Caml_option.valFromOption(url), {
                      method: "POST",
                      body: Caml_option.some(Core__Option.getExn(JSON.stringify({
                                    text: message
                                  }), undefined))
                    }));
    } else {
      return ;
    }
  } else if (isEnabled) {
    return RescriptCore.panic("MATTERMOST_URL not set");
  } else {
    return ;
  }
}

async function sendCreepsUpdate(bluePlayers, redPlayers, blueScore, redScore, points) {
  var blueNames = bluePlayers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var redNames = redPlayers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var winningTeam = blueScore > redScore ? "Blue" : "Red";
  var match;
  if (winningTeam === "Blue") {
    match = OpenSkillRating.calculateScore(bluePlayers, redPlayers, "Foosball");
  } else {
    var match$1 = OpenSkillRating.calculateScore(redPlayers, bluePlayers, "Foosball");
    match = [
      match$1[0],
      match$1[1],
      match$1[2]
    ];
  }
  var formatHandleOrName = function (player) {
    var handle = player.mattermostHandle;
    if (handle !== undefined) {
      return "@" + handle;
    } else {
      return player.name;
    }
  };
  var winnersStr = match[0].map(function (player) {
          var delta = OpenSkillRating.toDisplayDelta(player.lastOpenSkillChange);
          var sign = delta >= 0 ? "+" : "";
          return formatHandleOrName(player) + " (" + sign + delta.toString() + ")";
        }).join(", ");
  var losersStr = match[1].map(function (player) {
          var delta = OpenSkillRating.toDisplayDelta(player.lastOpenSkillChange);
          var sign = delta >= 0 ? "+" : "";
          return formatHandleOrName(player) + " (" + sign + delta.toString() + ")";
        }).join(", ");
  var blueIndividuals;
  blueIndividuals = winningTeam === "Blue" ? winnersStr : losersStr;
  var redIndividuals;
  redIndividuals = winningTeam === "Blue" ? losersStr : winnersStr;
  var blueWinProb = OpenSkillRating.getWinProbability(bluePlayers, redPlayers) * 100.0;
  var redWinProb = 100.0 - blueWinProb;
  var blueProbRounded = Math.round(blueWinProb * 10.0) / 10.0;
  var redProbRounded = Math.round(redWinProb * 10.0) / 10.0;
  var blueProbStr = blueProbRounded.toString();
  var redProbStr = redProbRounded.toString();
  var winnersProb;
  winnersProb = winningTeam === "Blue" ? blueWinProb : redWinProb;
  var losersProb;
  losersProb = winningTeam === "Blue" ? redWinProb : blueWinProb;
  var sprokkelTitle = winnersProb > 80.0 ? "**SPROKKEL ALERT!** ðŸš¨ðŸš¨ðŸš¨\n\n" : "";
  var losingFavoriteImage = losersProb > 80.0 ? "\n\n![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMDg4OXM2NDViaTU3Y21lZWFxam93YThyeXNkNzBkeGl0cTlucWhtYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/mcH0upG1TeEak/giphy.gif)\n" : "";
  var message = sprokkelTitle + ("### Nieuw potje geregistreerd!\n\n| Team | Spelers | Goals |\n| ---- | ------- | ----- |\n| Blauw | " + blueNames + " | " + blueScore.toString() + " |\n| Rood | " + redNames + " | " + redScore.toString() + " |\n\nIndividueel:\n- Blauw: " + blueIndividuals + "\n- Rood: " + redIndividuals + "\n\nOpenSkill winstkans (pre-game): Blauw " + blueProbStr + "% vs Rood " + redProbStr + "%\n") + losingFavoriteImage;
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

async function sendDartsUpdate(winners, losers, points, mode) {
  var winnerNames = winners.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var loserNames = losers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var message = "### ðŸŽ¯ Nieuw darts potje geregistreerd!\n\nWinnaar: " + winnerNames + " (+" + points.toString() + ")\nVerliezer: " + loserNames + " (-" + points.toString() + ")\nGame mode: " + mode + "\n";
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

async function sendDailyUpdate() {
  var overview = await Summary.getDailyOverview("Daily");
  var overviewArray = Array.from(overview.values()).toSorted(function (a, b) {
        var a$1 = ((a.creeps << 16) - (a.games << 8) | 0) - a.score | 0;
        var b$1 = ((b.creeps << 16) - (b.games << 8) | 0) - b.score | 0;
        return b$1 - a$1;
      });
  var match = overviewArray.length;
  if (match === 0) {
    return false;
  }
  var table = overviewArray.map(function (creeper, index) {
          return "| " + (index + 1 | 0).toString() + " | " + creeper.name + " | " + creeper.creeps.toString() + " | " + creeper.games.toString() + " | " + creeper.score.toString() + " | " + creeper.goalDiff.toString() + " |";
        }).join("\n");
  var topCreeper = Core__Option.getExn(overviewArray[0], undefined);
  var intro = "### De kruip statistieken van vandaag zijn bekend!\n\nFeliciteer direct onze top kruiper van de dag: " + topCreeper.name + " met maar liefst " + topCreeper.creeps.toString() + " kruipjes en een netto score van " + topCreeper.score.toString() + "!\n\n| # | Naam | Kruipjes | Potjes | Netto Score | Doel saldo |\n| - | ---- | -------- | ------ | ----------- | ---------- |\n" + table + "\n\n";
  var prom = publishMessage(intro);
  if (prom !== undefined) {
    await Caml_option.valFromOption(prom);
    return true;
  } else {
    console.log(intro);
    return false;
  }
}

async function sendDaysWithoutReset(name) {
  var message = name + " is reset";
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

export {
  sendCreepsUpdate ,
  sendDartsUpdate ,
  publishMessage ,
  sendDailyUpdate ,
  sendDaysWithoutReset ,
}
/* url Not a pure module */
