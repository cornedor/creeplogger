'use server';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Summary from "./Summary.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as RescriptCore from "@rescript/core/src/RescriptCore.bs.mjs";

var url = process.env.MATTERMOST_URL;

var isEnabled = process.env.MATTERMOST_ENABLED === "true";

function publishMessage(message) {
  if (url !== undefined) {
    if (isEnabled) {
      return Caml_option.some(fetch(Caml_option.valFromOption(url), {
                      method: "POST",
                      body: Caml_option.some(Core__Option.getExn(JSON.stringify({
                                    text: message
                                  }), undefined))
                    }));
    } else {
      return ;
    }
  } else if (isEnabled) {
    return RescriptCore.panic("MATTERMOST_URL not set");
  } else {
    return ;
  }
}

async function sendCreepsUpdate(bluePlayers, redPlayers, blueScore, redScore, points) {
  var blueNames = bluePlayers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var redNames = redPlayers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var bluePoints = blueScore < redScore ? -points | 0 : points;
  var redPoints = blueScore > redScore ? -points | 0 : points;
  var message = "### Nieuw potje geregistreerd!\n\n| Team | Goals | Punten |\n| ---- | ----- | ------ |\n| " + blueNames + " | " + blueScore.toString() + " | " + bluePoints.toString() + " |\n| " + redNames + " | " + redScore.toString() + " | " + redPoints.toString() + " |\n";
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

async function sendDartsUpdate(winners, losers, points, mode) {
  var winnerNames = winners.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var loserNames = losers.map(function (player) {
          var handle = player.mattermostHandle;
          if (handle !== undefined) {
            return "@" + handle;
          } else {
            return player.name;
          }
        }).join(", ");
  var message = "### ðŸŽ¯ Nieuw darts potje geregistreerd!\n\nWinnaar: " + winnerNames + " (+" + points.toString() + ")\nVerliezer: " + loserNames + " (-" + points.toString() + ")\nGame mode: " + mode + "\n";
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

async function sendDailyUpdate() {
  var overview = await Summary.getDailyOverview("Daily");
  var overviewArray = Array.from(overview.values()).toSorted(function (a, b) {
        var a$1 = ((a.creeps << 16) - (a.games << 8) | 0) - a.score | 0;
        var b$1 = ((b.creeps << 16) - (b.games << 8) | 0) - b.score | 0;
        return b$1 - a$1;
      });
  var match = overviewArray.length;
  if (match === 0) {
    return false;
  }
  var table = overviewArray.map(function (creeper, index) {
          return "| " + (index + 1 | 0).toString() + " | " + creeper.name + " | " + creeper.creeps.toString() + " | " + creeper.games.toString() + " | " + creeper.score.toString() + " |";
        }).join("\n");
  var topCreeper = Core__Option.getExn(overviewArray[0], undefined);
  var intro = "### De kruip statistieken van vandaag zijn bekend!\n\nFeliciteer direct onze top kruiper van de dag: " + topCreeper.name + " met maar liefst " + topCreeper.creeps.toString() + " kruipjes en een netto score van " + topCreeper.score.toString() + "!\n\n| # | Naam | Kruipjes | Potjes | Netto Score |\n| - | ---- | -------- | ------ | ----------- |\n" + table + "\n\n";
  var prom = publishMessage(intro);
  if (prom !== undefined) {
    await Caml_option.valFromOption(prom);
    return true;
  } else {
    console.log(intro);
    return false;
  }
}

async function sendDaysWithoutReset(name) {
  var message = name + " is reset";
  var promise = publishMessage(message);
  if (promise !== undefined) {
    await Caml_option.valFromOption(promise);
  }
  return 0;
}

export {
  sendCreepsUpdate ,
  sendDartsUpdate ,
  publishMessage ,
  sendDailyUpdate ,
  sendDaysWithoutReset ,
}
/* url Not a pure module */
