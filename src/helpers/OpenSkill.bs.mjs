// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Openskill from "openskill";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as RescriptCore from "@rescript/core/src/RescriptCore.bs.mjs";

function createRating(muOpt, sigmaOpt, param) {
  var mu = muOpt !== undefined ? muOpt : 25.0;
  var sigma = sigmaOpt !== undefined ? sigmaOpt : 8.333;
  return Openskill.rating({
              mu: mu,
              sigma: sigma
            });
}

function defaultRating() {
  return Openskill.rating();
}

function getOrdinal(rating) {
  return Openskill.ordinal(rating);
}

function rateGame(winningTeam, losingTeam) {
  var teams = [
    winningTeam,
    losingTeam
  ];
  var results = Openskill.rate(teams, {
        balance: true
      });
  if (results.length !== 2) {
    return RescriptCore.panic("Unexpected result from rate function");
  }
  var winnerUpdates = results[0];
  var loserUpdates = results[1];
  return [
          winnerUpdates,
          loserUpdates
        ];
}

function getWinProbability(teamA, teamB) {
  var probabilities = Openskill.predictWin([
        teamA,
        teamB
      ]);
  return probabilities[0];
}

function playerToRating(player) {
  var sigmaOpt = player.sigma;
  var muOpt = player.mu;
  return Openskill.rating({
              mu: muOpt,
              sigma: sigmaOpt
            });
}

function getTeamAverageRating(team) {
  var totalMu = Core__Array.reduce(team, 0.0, (function (acc, rating) {
          return acc + rating.mu;
        }));
  var totalSigma = Core__Array.reduce(team, 0.0, (function (acc, rating) {
          return acc + rating.sigma;
        }));
  var teamSize = team.length;
  if (teamSize <= 0.0) {
    return Openskill.rating();
  }
  var sigmaOpt = totalSigma / teamSize;
  var muOpt = totalMu / teamSize;
  return Openskill.rating({
              mu: muOpt,
              sigma: sigmaOpt
            });
}

function applyMarginMultiplier(scoreA, scoreB, baseChange) {
  var scoreDiff = PervasivesU.abs(scoreA - scoreB | 0);
  var margin = Math.max(1.0, scoreDiff * 0.5);
  return baseChange * margin;
}

export {
  createRating ,
  defaultRating ,
  getOrdinal ,
  rateGame ,
  getWinProbability ,
  playerToRating ,
  getTeamAverageRating ,
  applyMarginMultiplier ,
}
/* openskill Not a pure module */
