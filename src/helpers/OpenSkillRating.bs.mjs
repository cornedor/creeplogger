// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as OpenSkill from "./OpenSkill.bs.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.mjs";

function getOpenSkillRating(player) {
  return OpenSkill.createRating(player.mu, player.sigma, undefined);
}

function calculateOrdinal(mu, sigma) {
  return mu - 3.0 * sigma;
}

function teamToRatings(team) {
  return team.map(getOpenSkillRating);
}

function updatePlayerRating(player, newRating) {
  var newOrdinal = newRating.mu - 3.0 * newRating.sigma;
  var muChange = newRating.mu - player.mu;
  var newrecord = Caml_obj.obj_dup(player);
  newrecord.ordinal = newOrdinal;
  newrecord.sigma = newRating.sigma;
  newrecord.mu = newRating.mu;
  newrecord.lastEloChange = muChange;
  return newrecord;
}

function calculateScore(winners, losers, gameModeOpt) {
  var winnerRatings = winners.map(getOpenSkillRating);
  var loserRatings = losers.map(getOpenSkillRating);
  var match = OpenSkill.rateGame(winnerRatings, loserRatings);
  var newLoserRatings = match[1];
  var newWinnerRatings = match[0];
  var updatedWinners = winners.map(function (player, index) {
        var newRating = newWinnerRatings[index];
        return updatePlayerRating(player, newRating);
      });
  var updatedLosers = losers.map(function (player, index) {
        var newRating = newLoserRatings[index];
        return updatePlayerRating(player, newRating);
      });
  var avgWinnerChange = Core__Array.reduce(updatedWinners, 0.0, (function (acc, player) {
          return acc + player.lastEloChange;
        })) / updatedWinners.length;
  return [
          updatedWinners,
          updatedLosers,
          avgWinnerChange
        ];
}

function getWinProbability(teamA, teamB) {
  var ratingsA = teamA.map(getOpenSkillRating);
  var ratingsB = teamB.map(getOpenSkillRating);
  return OpenSkill.getWinProbability(ratingsA, ratingsB);
}

function roundScore(score) {
  return Math.round(score) | 0;
}

export {
  getOpenSkillRating ,
  calculateOrdinal ,
  teamToRatings ,
  updatePlayerRating ,
  calculateScore ,
  getWinProbability ,
  roundScore ,
}
/* OpenSkill Not a pure module */
