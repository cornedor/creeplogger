// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Elo from "../src/helpers/Elo.bs.mjs";
import * as Vitest from "./Vitest.bs.mjs";

function makePlayer(eloOpt, dartsEloOpt, param) {
  var elo = eloOpt !== undefined ? eloOpt : 1000.0;
  var dartsElo = dartsEloOpt !== undefined ? dartsEloOpt : 1000.0;
  return {
          name: "p",
          wins: 0,
          losses: 0,
          absoluteWins: 0,
          absoluteLosses: 0,
          games: 0,
          teamGoals: 0,
          teamGoalsAgainst: 0,
          blueGames: 0,
          redGames: 0,
          blueWins: 0,
          redWins: 0,
          elo: elo,
          lastEloChange: 0.0,
          key: "k",
          mattermostHandle: undefined,
          lastGames: [],
          hidden: undefined,
          mu: 25.0,
          sigma: 8.333,
          ordinal: 0.0,
          lastOpenSkillChange: 0.0,
          dartsElo: dartsElo,
          dartsLastEloChange: 0.0,
          dartsGames: 0,
          dartsWins: 0,
          dartsLosses: 0,
          dartsLastGames: []
        };
}

Vitest.describe("Elo.calculateScore", (function () {
        Vitest.test("increases winners elo and decreases losers elo (Foosball)", (function () {
                var winners = [
                  makePlayer(1100.0, undefined, undefined),
                  makePlayer(1050.0, undefined, undefined)
                ];
                var losers = [
                  makePlayer(1000.0, undefined, undefined),
                  makePlayer(950.0, undefined, undefined)
                ];
                var match = Elo.calculateScore(winners, losers, "Foosball");
                var newLosers = match[1];
                var newWinners = match[0];
                Vitest.expectFloatGreater(newWinners[0].elo, 1100.0);
                Vitest.expectFloatGreater(newWinners[1].elo, 1050.0);
                Vitest.expectFloatLess(newLosers[0].elo, 1000.0);
                Vitest.expectFloatLess(newLosers[1].elo, 950.0);
                Vitest.expectFloatGreater(match[2], 0.0);
              }));
        Vitest.test("uses dartsElo when gameMode is Darts", (function () {
                var winners = [makePlayer(undefined, 1200.0, undefined)];
                var losers = [makePlayer(undefined, 1000.0, undefined)];
                var match = Elo.calculateScore(winners, losers, "Darts");
                Vitest.expectFloatGreater(match[0][0].dartsElo, 1200.0);
                Vitest.expectFloatLess(match[1][0].dartsElo, 1000.0);
                Vitest.expectFloatGreater(match[2], 0.0);
              }));
        Vitest.test("roundScore rounds to nearest int", (function () {
                Vitest.expectIntEqual(Elo.roundScore(1.2), 1);
                Vitest.expectIntEqual(Elo.roundScore(1.5), 2);
              }));
      }));

export {
  makePlayer ,
}
/*  Not a pure module */
