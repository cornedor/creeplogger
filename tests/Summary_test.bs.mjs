// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "./Vitest.bs.mjs";
import * as Summary from "../src/helpers/Summary.bs.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";

var mockGames = {};

mockGames["g1"] = {
  blueScore: 5,
  redScore: 6,
  blueTeam: [
    "a",
    "b"
  ],
  redTeam: [
    "c",
    "d"
  ],
  date: new Date(),
  modifiers: undefined
};

mockGames["g2"] = {
  blueScore: 7,
  redScore: 0,
  blueTeam: ["a"],
  redTeam: ["c"],
  date: new Date(),
  modifiers: undefined
};

var mockPlayers = {};

mockPlayers["a"] = {
  name: "Alice",
  wins: 0,
  losses: 0,
  absoluteWins: 0,
  absoluteLosses: 0,
  games: 0,
  teamGoals: 0,
  teamGoalsAgainst: 0,
  blueGames: 0,
  redGames: 0,
  blueWins: 0,
  redWins: 0,
  elo: 1000.0,
  lastEloChange: 0.0,
  key: "a",
  mattermostHandle: undefined,
  lastGames: [],
  hidden: undefined,
  mu: 25.0,
  sigma: 8.333,
  ordinal: 0.0,
  lastOpenSkillChange: 0.0,
  dartsElo: 1000.0,
  dartsLastEloChange: 0.0,
  dartsGames: 0,
  dartsWins: 0,
  dartsLosses: 0,
  dartsLastGames: []
};

var newrecord = Caml_obj.obj_dup(mockPlayers["a"]);

newrecord.key = "b";

newrecord.name = "Bob";

mockPlayers["b"] = newrecord;

var newrecord$1 = Caml_obj.obj_dup(mockPlayers["a"]);

newrecord$1.key = "c";

newrecord$1.name = "Carol";

mockPlayers["c"] = newrecord$1;

var newrecord$2 = Caml_obj.obj_dup(mockPlayers["a"]);

newrecord$2.key = "d";

newrecord$2.name = "Dave";

mockPlayers["d"] = newrecord$2;

Vitest.describe("Summary.getDailyOverviewWith", (function () {
        Vitest.testAsync("computes creeps/games/score", (async function () {
                var result = await Summary.getDailyOverviewWith("Daily", (function (param) {
                        return Promise.resolve(mockGames);
                      }), (function () {
                        return Promise.resolve(mockPlayers);
                      }));
                var get = function (key) {
                  return Core__Option.getExn(result.get(key), undefined);
                };
                Vitest.expectIntEqual(get("a").creeps, 1);
                Vitest.expectIntEqual(get("a").games, 2);
                Vitest.expectIntEqual(get("a").score, 1);
                Vitest.expectIntEqual(get("b").creeps, 1);
                Vitest.expectIntEqual(get("b").games, 1);
                Vitest.expectIntEqual(get("b").score, -6);
                Vitest.expectIntEqual(get("c").creeps, 2);
                Vitest.expectIntEqual(get("c").games, 2);
                Vitest.expectIntEqual(get("c").score, -1);
                Vitest.expectIntEqual(get("d").creeps, 0);
                Vitest.expectIntEqual(get("d").games, 1);
                return Vitest.expectIntEqual(get("d").score, 6);
              }));
      }));

export {
  mockGames ,
  mockPlayers ,
}
/*  Not a pure module */
